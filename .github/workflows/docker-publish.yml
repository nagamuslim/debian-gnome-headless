name: Build, Test, and Push Docker Image

on:
  # TRIGGER 1: Runs when you push to the main branch
  push:
    branches: [ "main" ]
  # TRIGGER 2: Runs automatically every day at 4 AM UTC to check for base image updates
  schedule:
    - cron: '0 4 * * *'
  # TRIGGER 3: Allows you to run it manually
  workflow_dispatch:

jobs:
  # JOB 1: Checks for updates to the base image. This job is fast.
  check-for-update:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    outputs:
      needs-updating: ${{ steps.check.outputs.needs-updating }}
    env:
      # Use the same fallback logic here for consistency
      DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME || github.actor }}
    steps:
      - name: Check if base image has been updated
        id: check
        uses: lucacome/docker-image-update-checker@v2.0.0
        with:
          # This must match the 'FROM' line in your Dockerfile
          base-image: minimum2scp/systemd:latest
          # Use the DOCKER_USER variable to construct the image name
          image: ${{ env.DOCKER_USER }}/debian-gnome-headless:latest

  # JOB 2: Builds and pushes the image.
  build-and-push:
    needs: check-for-update
    # Runs if triggered by a push OR if the check job found an update.
    if: github.event_name != 'schedule' || needs.check-for-update.outputs.needs-updating == 'true'
    runs-on: ubuntu-latest
    env:
      DOCKERFILE_PATH: "debian-gnome-headless.dockerfile"
      IMAGE_NAME: "debian-gnome-headless"
      # Your original, resilient logic for determining the Docker user
      DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME || github.actor }}

    steps:
      - name: Verify Docker credentials
        run: |
          if [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "❌ Missing DOCKERHUB_TOKEN secret"
            exit 1
          fi
          echo "✅ Docker credentials found"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t "${DOCKER_USER}/${IMAGE_NAME}:latest" \
                       -f "${DOCKERFILE_PATH}" .

      - name: Run container for testing
        run: |
          docker run --name my-debian-container --privileged -d \
                     "${DOCKER_USER}/${IMAGE_NAME}:latest"

      - name: Test for systemd and Push on Success
        run: |
          echo "--- Checking for systemd as PID 1 ---"
          sleep 15
          INIT_PROCESS=$(docker exec my-debian-container ps -p 1 -o comm=)
          echo "Process with PID 1 is: $INIT_PROCESS"
          if [ "$INIT_PROCESS" = "systemd" ]; then
            echo "✅ systemd detected. Pushing image to Docker Hub..."
            docker push "${DOCKER_USER}/${IMAGE_NAME}:latest"
          else
            echo "❌ Test Failed: systemd was not found as PID 1."
            exit 1
          fi

      - name: Clean up container
        if: always()
        run: |
          echo "--- Cleaning up container ---"
          docker rm -f my-debian-container || true
