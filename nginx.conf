# /etc/nginx/conf.d/default.conf (or your chosen Nginx config file)
server {
    listen 6901;
    server_name localhost; # Or your server's IP/domain if accessed directly without a tunnel for this config

    # Access and error logs
    access_log syslog:server=unix:/dev/log,tag=nginx_access,severity=info;
    error_log syslog:server=unix:/dev/log,tag=nginx_error,severity=warn;

    # Root location - proxies to noVNC (served by websockify)
    # websockify is listening on 127.0.0.1:6080 and serving /usr/share/novnc
    # It also handles WebSocket upgrade for VNC traffic.
    location = / {
        # Issue a temporary (302) redirect to the desired default page.
        # The browser will then make a new request for /vnc.html.
        return 302 /vnc.html;
    }
    
    location / {
        proxy_pass http://127.0.0.1:6080/; # Trailing slash is important here
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Keep WebSocket connections alive for VNC
        proxy_read_timeout 7d; # 7 days, or a suitable long duration
        proxy_send_timeout 7d;
        proxy_buffering off; # Good for real-time VNC
    }
    
    # Primary HLS Stream location - proxies to MediaMTX
    # Requests to https://<your-url>:6901/stream/foo will go to http://127.0.0.1:8888/stream/foo
    location /stream/ { # Trailing slash here
        proxy_pass http://127.0.0.1:8888/stream/; # Trailing slash here matches the location

        proxy_http_version 1.1;
        proxy_set_header Host $host; # Pass original host
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # CORS headers - MediaMTX usually handles these well, but adding them here ensures
        # they are present if the player is ever on a different origin than this proxy.
        # Since the player is served via location /, it's same-origin, but good practice.
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, HEAD, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

        # Handle CORS preflight requests for this path
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        
        # Optional: Specific caching for HLS segments if MediaMTX doesn't set them ideally
        # However, MediaMTX is usually good about HLS caching headers.
        # If you find issues, you could add nested locations for .m3u8 and .ts here,
        # but try without them first to keep it simple.
        # Example:
        # location ~ \.m3u8$ {
        #     add_header Cache-Control 'no-cache, no-store, must-revalidate';
        # }
        # location ~ \.ts$ {
        #     expires 1h; # Cache TS segments for 1 hour
        # }
    }
    
    # Fallback Stream location - proxies to Icecast
    # Requests to https://<your-url>:6901/stream-fallback/ will go to http://127.0.0.1:8000/stream/
    # (assuming Icecast mount point is /stream)
    location /stream-fallback { # Trailing slash here
        proxy_pass http://127.0.0.1:8000/stream; # Trailing slash here. Icecast serves at /stream/

        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Accept-Encoding ""; # Icecast might not like gzipped requests from proxy

        # CORS Headers for Icecast (Icecast usually sends its own, but this ensures it)
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, HEAD, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,icy-metadata' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }
}
